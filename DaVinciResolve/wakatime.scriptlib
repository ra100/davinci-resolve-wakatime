local pluginName = "davinci-resolve-wakatime"
local version = "0.0.1"
local DEBUG = true

globals.wakatime_tracking = false

local USER_HOME = os.getenv("HOME")

resolve = Resolve()
dump(resolve)

function log(message)
  if DEBUG then
    print(message)
  end
end

function get_platform_and_arch()
  local is_windows = package.config:sub(1,1) == '\\'
  local is_macos = false
  local is_linux = false

  local executable
  if is_windows then
    executable = jit.arch:lower() == 'x64' and 'wakatime-cli-windows-amd64' or 'wakatime-cli-windows-arm64'
  else
    if jit.arch:lower() == 'arm64' then
      executable = '/.wakatime/wakatime-cli-darwin-arm64'
      is_macos = true
    else
      executable = '/.wakatime/wakatime-cli-linux-amd64'
      is_linux = true
    end
  end

  return is_windows, is_macos, is_linux, executable
end

function get_wakatime_path()
  local is_windows, is_macos, is_linux, executable = get_platform_and_arch()
  return USER_HOME .. executable
end

function is_windows()
  local is_windows = get_platform_and_arch()
  return is_windows
end

function is_focused()
  local command
  if is_windows() then
    command = 'tasklist /v /fo csv | findstr /i "Active" | findstr /i /v "N/A" | cut /d "," /f 2'
  else
    command = "xdotool getwindowfocus getwindowname"
  end

  local cmd = io.popen(command)
  local windowName = cmd:read("*a")
  cmd:close()
  if string.find(windowName, "DaVinci Resolve") then
    return true
  end

  return false
end

function sleep()
  if is_windows() then
    -- Windows
    os.execute("timeout /t 15")
  else
    -- Linux/OSX
    os.execute("sleep 15")
  end
end

function start_tracking()
  while true and globals.wakatime_tracking do
    if is_focused() then
      local projectManager = resolve:GetProjectManager()
      local project = projectManager:GetCurrentProject()
      if project ~= nil then
        local projectName = project:GetName()
        local currentPage = resolve:GetCurrentPage()
        if currentPage ~= nil then
          local wakatimePath = get_wakatime_path()
          local cmd = string.format("%s \\\
                  --project \"%s\" \\\
                  --entity-type domain \\\
                  --entity \"%s\" \\\
                  --plugin \"%s/%s\" \\\
                  --verbose \\\
                  --category designing",
                  wakatimePath, projectName, currentPage, pluginName, version)

          log(cmd)
          os.execute(cmd)
        end
      end
    end

    sleep()
  end
end

if not globals.wakatime_tracking then
  print('Starting Wakatime Tracking')
  globals.wakatime_tracking = true
  start_tracking()
else
  print('Wakatime Tracking already running')
end